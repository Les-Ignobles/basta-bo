# Cursor Rules - Back Office Development

## Architecture & Structure

### Features-based Architecture
- Organiser le code par features (ex: `features/cooking/`)
- Chaque feature contient: `types.ts`, `store.ts`, `repositories/`, `components/`
- Les entités métier vont dans leur feature respective
- Éviter les dossiers génériques comme `components/` pour le métier

### Types & Entités
- Créer des types TypeScript pour chaque entité BDD
- Utiliser `TranslationText` pour les champs multilingues (JSONB)
- Ignorer les champs techniques comme `*_embedding`, `created_at` dans les formulaires
- Ajouter `id?: number` aux types de formulaire pour l'édition

## Frontend (React/Next.js)

### Composants UI
- Utiliser EXCLUSIVEMENT les composants shadcn/ui
- Installer via CLI: `npx --yes shadcn@latest add [component]`
- Ne jamais créer de composants UI custom, toujours shadcn

### Store & State Management
- Utiliser Zustand pour la gestion d'état
- Store par feature avec actions CRUD
- Toujours passer par le store, jamais d'appels API directs dans les composants
- Store doit gérer: loading, error, pagination, filtres

### Formulaires & Modales
- Utiliser des modales (Dialog shadcn) au lieu de pages séparées
- Modales larges: `className="sm:max-w-[800px] max-w-[95vw] w-full"`
- Formulaires avec validation et états de chargement
- Réutiliser la même modale pour création/édition

### Tables & Listes
- Tables avec shadcn Table
- Pagination par défaut à 50 éléments
- Barre de recherche avec debounce (400ms) - largeur w-80
- Filtres multiples avec Popover (catégories, traductions)
- Filtres simples avec Checkbox (sans image)
- Barre sticky pour recherche/pagination
- Colonne Actions avec menu dropdown (3 points)
- Clic sur ligne pour ouvrir modal d'édition + cursor-pointer
- Indicateur de chargement sur tableau avec animation
- Tri alphabétique par défaut
- Colonne progression traductions avec badges colorés

### Traductions
- Composant `TranslationTextField` avec:
  - Champ FR + bouton "Traduire" inline avec indicateur de chargement
  - Barre de progression des traductions (calcul précis sur 2 langues)
  - Accordéon "Autres langues (X/2)" (EN, ES)
  - Traduction automatique FR→EN/ES via API avec auto-correction
  - Service IA avec schémas Zod pour validation
- Filtre par progression traductions (complètes/incomplètes)
- Calcul de progression: 6 champs (2 langues × 3 champs)
- Badges colorés: Vert (100%), Gris (50-99%), Rouge (0-49%)

## Backend (API Routes)

### Repositories Pattern
- `BaseRepository` générique avec CRUD
- Repository par entité qui étend BaseRepository
- Utiliser Supabase client serveur
- Méthodes: `findAll()`, `findById()`, `create()`, `update()`, `delete()`, `findPage()`

### API Routes
- Routes RESTful: `GET`, `POST`, `PUT`, `DELETE`
- Pagination: `?page=1&pageSize=50&search=term`
- Filtres: `?noImage=true&categories=1,2&translationFilter=incomplete`
- Retourner toujours `{ data, total, page, pageSize }` pour les listes
- API de traduction avec schémas Zod dynamiques

### Upload d'Images
- Route générique `/api/upload` qui accepte `fileName` en paramètre
- Naming convention: `${entity.id}-${slugify(entity.name.fr)}.ext`
- Buckets Supabase: `ingredients`, `recipes`
- Composant `ImageUpload` avec drag&drop et preview

## Base de Données (Supabase)

### Structure
- Tables avec champs JSONB pour traductions
- Champs techniques: `id`, `created_at`, `*_embedding`
- Relations via `*_id` (foreign keys)

### Naming Convention
- Tables: `snake_case` (ex: `ingredient_categories`)
- Champs: `snake_case`
- Images: `${id}-${slugify(name.fr)}.ext`

## Code Quality

### Nettoyage
- Supprimer TOUJOURS le code mort lors des refactos
- Ne pas laisser de fichiers dépréciés
- Vérifier les lints après chaque modification

### Git
- Commits descriptifs avec préfixe: `feat:`, `fix:`, `refactor:`
- Messages en français
- Push régulièrement

### TypeScript
- Types stricts, pas de `any` sauf cas exceptionnels
- Interfaces claires pour les props
- Gestion d'erreurs appropriée

## Workflow de Développement

1. **Setup**: Installer shadcn, Zustand, Supabase
2. **Types**: Créer les types d'entités
3. **Repositories**: BaseRepository + repositories spécifiques
4. **API**: Routes RESTful avec pagination/filtres
5. **Store**: Zustand avec actions CRUD
6. **UI**: Composants shadcn, modales, tables
7. **Upload**: Route générique + composant drag&drop
8. **Tests**: Vérifier création/édition/suppression

## Préférences UX

- Pagination 50 éléments par défaut
- Recherche avec debounce (400ms) et largeur w-80
- Barres sticky pour navigation
- Modales larges pour formulaires
- Feedback visuel (loading states, animations)
- Messages d'erreur clairs
- Tri alphabétique par défaut
- Clic sur ligne pour édition
- Indicateurs de chargement sur boutons et tableaux
- Filtres avec badges de compteur
- Ordre des filtres: Recherche → Catégories → Traductions → Sans image

## Service IA & Traduction

### Architecture IA
- Service abstrait `IaService` avec méthodes génériques
- Implémentation `OpenaiIaService` avec `client.responses.create`
- Support des schémas Zod avec `zodTextFormat`
- Types: `ChatMessage`, `CompletionOptions`, `EmbeddingOptions`

### API de Traduction
- Endpoint `/api/translate` avec paramètres: `text`, `source`, `languages[]`
- Schémas Zod dynamiques selon les langues demandées
- Auto-correction française incluse
- Retour direct objet `TranslationText`

## Environnement

- Variables d'env: `NEXT_PUBLIC_SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`, `OPENAI_API_KEY`
- Fichier `.env.local` pour le développement
- Buckets Supabase publics pour les images
